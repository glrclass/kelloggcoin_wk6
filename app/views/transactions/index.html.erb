<h1>KelloggCoin Ledger</h1>

<!-- Step 1: List all transactions, starting with the ICO -->

<!-- Create an ordered list (`ol`) with each list item (`li`) displaying the details of each of the 100 transactions
 If the transaction is anything but the "Initial Coin Offering", i.e. the `from_user` of the `Transaction` exists (you can test this condition with something like `if from_user`), then display the details of the transaction (e.g. *1557 KC from Ben to Brian*)
If the transaction is the "Initial Coin Offering", then display it as such (e.g. *Initial coin offering: 10000 to Ben*)-->

<ol>
  <% Transaction.limit(100).each do |transaction| %>
    <li>
      <% if transaction.from_user_id && User.exists?(transaction.from_user_id) %>
        <%= "#{transaction.amount} KC from #{User.find(transaction.from_user_id).name} to #{User.find(transaction.to_user_id).name}" %>
      <% else %>
        <%= "Initial Coin Offering: #{transaction.amount} to #{User.find(transaction.to_user_id).name}" %>
      <% end %>
    </li>
  <% end %>
</ol>

<!-- Step 2: Calculate and display the balances -->

<!-- Display the balances for each user – the expected balances are included with the starter code
- Use a loop to iterate through each user in the `users` table – don't hard-code – assume that the users and associated data could change
- ActiveRecord supports the SQL aggregate `SUM` function – e.g. `Transaction.where({ "to_user_id" => 123 }).sum("amount")`

<!-- 
Expected balances:
Balance for Brian: 1348 KC
Balance for Ben: 2516 KC
Balance for Evan: 1164 KC
Balance for Anthony: 1456 KC
Balance for Krystina: 3516 KC 
-->